{"version":3,"sources":["webpack:///src/app/core/services/toast.service.ts","webpack:///src/app/core/validators/birthdate.validators.ts","webpack:///src/app/features/register-user/register-user.component.ts","webpack:///src/app/features/register-user/register-user.component.html","webpack:///src/app/features/register-user/register-user.module.ts","webpack:///src/app/features/register-user/register-user.routing.ts"],"names":["ToastService","messageService","severity","summary","detail","add","messages","addAll","clear","providedIn","birthDateValidator","control","value","today","Date","birthDate","age","getFullYear","min","m","getMonth","getDate","reuslt","RegisterUserComponent","userService","router","fb","toastService","userform","group","required","compose","minLength","email","version","isRegistered","addUser","controls","navigate","addSingle","onClickRegisterUser","onClickGoToLogin","selector","templateUrl","styleUrls","RegisterUserModule","imports","declarations","routes","path","component","RegisterUserRoutingModule","forChild","exports"],"mappings":"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","file":"src-app-features-register-user-register-user-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MessageService } from 'primeng/api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n/**\r\n * Toast service class\r\n * This class provides methods to add single, multiple alerts as a toast \r\n */\r\nexport class ToastService {\r\n    constructor(private messageService: MessageService) { }\r\n\r\n    /**\r\n     * add single toast message\r\n     * @param severity Severity level of the message, valid values are \"success\", \"info\", \"warn\" and \"error\"\r\n     * @param summary Summary text of the message.\r\n     * @param detail Detail text of the message.\r\n     */\r\n    addSingle(severity: string, summary: string, detail: string) {\r\n        this.messageService.add({ severity: severity, summary: summary, detail: detail });\r\n    }\r\n\r\n    /**\r\n     * add multiple toast messages\r\n     * @param messages \r\n     * array of message type {severity:'success', summary:'Service Message', detail:'Via MessageService'}\r\n     */\r\n    addMultiple(messages: any) {\r\n        this.messageService.addAll(messages);\r\n    }\r\n\r\n    /**\r\n     * clear all toast messages\r\n     */\r\n    clear() {\r\n        this.messageService.clear();\r\n    }\r\n}","import { AbstractControl } from '@angular/forms';\r\n\r\n/**\r\n * validation function\r\n * birth date should be less than 10 years\r\n * @param control \r\n */\r\nexport function birthDateValidator(control: AbstractControl) {\r\n    var value = control.value;\r\n    var today = new Date();\r\n    var birthDate = new Date(value);\r\n    var age = today.getFullYear() - birthDate.getFullYear();\r\n    var min = 10;\r\n    if (age > min + 1) {\r\n        return null;\r\n    }\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n        age--;\r\n    }\r\n    var reuslt = age >= min ? null : { 'invalidBirthDate': true };\r\n    return reuslt;\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Validators, FormControl, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ToastService } from 'src/app/core/services/toast.service';\r\nimport { birthDateValidator } from 'src/app/core/validators/birthdate.validators';\r\nimport { UserDataService } from 'src/app/core/services/user-data.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-register-user',\r\n  templateUrl: 'register-user.component.html',\r\n  styleUrls: ['register-user.component.css']\r\n})\r\nexport class RegisterUserComponent implements OnInit {\r\n\r\n  userform: FormGroup;\r\n\r\n  name: string;\r\n\r\n  emailId: string;\r\n\r\n  password: string;\r\n\r\n  version: string;\r\n\r\n  constructor(private userService: UserDataService, private router: Router, private fb: FormBuilder, private toastService: ToastService) { }\r\n\r\n  ngOnInit() {\r\n    this.userform = this.fb.group({\r\n      'name': new FormControl('', Validators.required),\r\n      'password': new FormControl('', Validators.compose([Validators.required, Validators.minLength(6)])),\r\n      'emailId': new FormControl('', [Validators.required, Validators.email]),\r\n      'birthDate': new FormControl('', [Validators.required, birthDateValidator])\r\n    });\r\n\r\n    this.version = environment.version;\r\n  }\r\n\r\n  onClickRegisterUser() {\r\n    let isRegistered: boolean = this.userService.addUser(this.userform.controls[\"name\"].value,\r\n      this.userform.controls[\"password\"].value,\r\n      this.userform.controls[\"emailId\"].value,\r\n      this.userform.controls[\"birthDate\"].value);\r\n    if (isRegistered) {\r\n      this.router.navigate(['/login']);\r\n      this.toastService.addSingle(\"success\", \"\", \"User registered.\")\r\n    }\r\n  }\r\n\r\n  onClickGoToLogin() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n}\r\n\r\n","<div class=\"user-regisration\">\r\n    <div class=\"p-grid p-nogutter p-justify-center p-align-center\" style=\"height:100%\">\r\n        <div class=\"p-xl-3 p-lg-6 p-md-8 p-sm-10\">\r\n            <form [formGroup]=\"userform\" (ngSubmit)=\"onClickRegisterUser()\">\r\n                <p-panel header=\"User Registration\">\r\n                    <div class=\"p-grid p-justify-center p-align-center\">\r\n                        <div class=\"p-xl-6 p-lg-6 p-md-8 p-sm-10\">\r\n                            <img src=\"assets/images/logo-large.png\" class=\"login-logo\" alt=\"\">\r\n                        </div>\r\n                        <div class=\"p-col-12\">\r\n                            <div class=\"ui-inputgroup\">\r\n                                <span class=\"ui-inputgroup-addon\"><span class=\"fa fa-user\"></span></span>\r\n                                <input id=\"float-input-username\" type=\"text\" size=\"30\" pInputText formControlName=\"name\" placeholder=\"user name\" required>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"p-col-12\" *ngIf=\"userform.controls['name'].errors && userform.controls['name'].dirty\">\r\n                            <p-message severity=\"error\" text=\"User name is required\" *ngIf=\"userform.controls['name'].errors['required']\"></p-message>\r\n                        </div>\r\n                        <div class=\"p-col-12\">\r\n                            <div class=\"ui-inputgroup\">\r\n                                <span class=\"ui-inputgroup-addon\"><span class=\"fa fa-key\"></span></span>\r\n                                <input id=\"float-input-password\" type=\"password\" size=\"30\" pInputText formControlName=\"password\" placeholder=\"password\" required>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"p-col-12\" *ngIf=\"userform.controls['password'].errors && userform.controls['password'].dirty\">\r\n                            <p-message severity=\"error\" text=\"Password is required\" *ngIf=\"userform.controls['password'].errors['required']\"></p-message>\r\n                            <p-message severity=\"error\" text=\"Minimum 6 characters required.\" *ngIf=\"userform.controls['password'].errors['minlength'] \"></p-message>\r\n                        </div>\r\n                        <div class=\"p-col-12\">\r\n                            <div class=\"ui-inputgroup\">\r\n                                <span class=\"ui-inputgroup-addon\"><span class=\"fa fa-at\"></span></span>\r\n                                <input id=\"float-input-emailid\" type=\"email\" size=\"30\" pInputText formControlName=\"emailId\" placeholder=\"Email Id\" required>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"p-col-12\" *ngIf=\"userform.controls['emailId'].errors && userform.controls['emailId'].dirty\">\r\n                            <p-message severity=\"error\" text=\"Email is required\" *ngIf=\"userform.controls['emailId'].errors['required']\"></p-message>\r\n                            <p-message severity=\"error\" text=\"Email is invalid\" *ngIf=\"userform.controls['emailId'].errors['email']\">\r\n                            </p-message>\r\n                        </div>\r\n                        <div class=\"p-col-12\">\r\n                            <p-calendar formControlName=\"birthDate\" placeholder=\"Birth date\" [showIcon]=true dateFormat=\"dd/mm/yy\"></p-calendar>\r\n                        </div>\r\n                        <div class=\"p-col-12\" *ngIf=\"userform.controls['birthDate'].errors && userform.controls['birthDate'].dirty\">\r\n                            <p-message severity=\"error\" text=\"Birthdate is required\" *ngIf=\"userform.controls['birthDate'].errors['required']\"></p-message>\r\n                            <p-message severity=\"error\" text=\"Minimum age should be 10 years.\" *ngIf=\"userform.controls['birthDate'].errors['invalidBirthDate']\"></p-message>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"p-grid\">\r\n                        <div class=\"p-col-6\">\r\n                            <button pButton type=\"button\" label=\"Register\" class=\"ui-button-raised\" [disabled]=\"!userform.valid\" (click)=\"onClickRegisterUser()\"></button>\r\n                        </div>\r\n                        <div class=\"p-col-6\">\r\n                            <button pButton type=\"button\" label=\"Login\" class=\"ui-button-raised\" (click)=\"onClickGoToLogin()\"></button>\r\n                        </div>\r\n                    </div>\r\n                </p-panel>\r\n                <div class=\"extra-page-footer\">\r\n                    <div>Version : {{version}}</div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegisterUserComponent } from 'src/app/features/register-user/register-user.component';\r\nimport { RegisterUserRoutingModule } from 'src/app/features/register-user/register-user.routing';\r\nimport { AppCommonModule } from 'src/app/app.common.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RegisterUserRoutingModule,\r\n    AppCommonModule\r\n  ],\r\n  declarations: [RegisterUserComponent]\r\n})\r\nexport class RegisterUserModule { }","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RegisterUserComponent } from 'src/app/features/register-user/register-user.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: RegisterUserComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class RegisterUserRoutingModule { }"]}